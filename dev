#!/usr/bin/env php
<?php

/**
 * Used to be Sek, Garm, and now DEV
 */
define('LARAVEL_START', microtime(true));

/**
 * Reason for disabling the File Hook
 * We are enabling all hooks except for the file hook. This is because the file hook
 * causes a zlib() error when Composer tries to autload the classes. It is not clear
 * why this happens but, we can work around it by disabling the file hook.
 *
 * Even though the file hook is disabled, we can still use the file functions like
 * file_get_contents(), file_put_contents(), etc. in a coroutine context without any
 * issues like blocking the event loop.
 *
 * Reason for disabling the Process Hook
 * When the process hook is enabled, it causes a warning:
 * "Warning: proc_open(): pty pseudo terminal not supported on this system"
 * This warning cause the Symfony process to not enable the PTY mode which is required
 * to ensure the output of the serve processes are displayed correctly.
 *
 * @see https://github.com/swoole/swoole-src/issues/5275
 */
\Swoole\Runtime::enableCoroutine(SWOOLE_HOOK_ALL ^ SWOOLE_HOOK_FILE);

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

$autoloader = require file_exists(__DIR__.'/vendor/autoload.php') ?  __DIR__.'/vendor/autoload.php' : __DIR__.'/../../autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = 0;
$lastError = null;
// @phpstan-ignore-next-line
\Swoole\Coroutine\run(function () use ($kernel, &$status, &$lastError): void {
    try {
        $status = $kernel->handle(
            $input = new Symfony\Component\Console\Input\ArgvInput,
            new Symfony\Component\Console\Output\ConsoleOutput
        );
    
        /*
        |--------------------------------------------------------------------------
        | Shutdown The Application
        |--------------------------------------------------------------------------
        |
        | Once Artisan has finished running, we will fire off the shutdown events
        | so that any final work may be done by the application before we shut
        | down the process. This is the last thing to happen to the request.
        |
        */
        $kernel->terminate($input, $status);
    } catch (Throwable $e) {
        $lastError = $e;
    }
});

if ($lastError) {
    throw $lastError;
}

exit($status);
